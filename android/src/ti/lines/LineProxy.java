/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.lines;

import android.app.Activity;
import android.graphics.Color;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiUIView;


@Kroll.proxy(creatableInModule = TiLinesModule.class)
public class LineProxy extends TiViewProxy {
    static final int MSG_POINTS = KrollProxy.MSG_LAST_ID + 101;
    private static final String LCAT = "LineProxy";
    LineView view;
    Object[] points;
    int lineColor = Color.BLACK;
    int lineWidth = 1;
    int startAt = 0;
    int maxValue = -1;
    int strokeType = TiLinesModule.STROKE_NORMAL;
    int xLines = 0;
    int yLines = 0;
    int fillColorTop = Color.WHITE;
    int fillColorBottom = Color.WHITE;
    int lineType = TiLinesModule.TYPE_CURVED;
    boolean showXAxis = false;
    boolean showYAxis = false;
    boolean fillSpace = false;

    // Constructor
    public LineProxy() {
        super();
    }

    @Override
    public TiUIView createView(Activity activity) {
        view = new LineView(this);
        view.getLayoutParams().autoFillsHeight = true;
        view.getLayoutParams().autoFillsWidth = true;
        updateView();
        return view;
    }

    private void updateView() {
        if (view != null) {
            view.setLineColor(lineColor);
            view.setLineWidth(lineWidth);
            view.startAt = startAt;
            view.maxValue = maxValue;
            view.showXAis = showXAxis;
            view.showYAis = showYAxis;
            view.yLines = yLines;
            view.fillSpace = fillSpace;
            view.xLines = xLines;
            view.lineType = lineType;
            view.strokeType = strokeType;
            view.fillColorTop = fillColorTop;
            view.fillColorBottom = fillColorBottom;
            if (points != null) {
                view.setPoints(points);
            }
        }
    }

    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);
        if (options.containsKey("values")) {
            points = (Object[]) options.get("values");
        }
        if (options.containsKey("lineColor")) {
            lineColor = TiConvert.toColor(options.getString("lineColor"), TiApplication.getAppCurrentActivity());
        }
        if (options.containsKey("lineWidth")) {
            lineWidth = TiConvert.toInt(options.get("lineWidth"));
        }
        if (options.containsKey("startAt")) {
            startAt = TiConvert.toInt(options.get("startAt"));
        }
        if (options.containsKey("maxValue")) {
            maxValue = TiConvert.toInt(options.get("maxValue"));
        }
        if (options.containsKey("xAxis")) {
            showXAxis = TiConvert.toBoolean(options.get("xAxis"), false);
        }
        if (options.containsKey("yAxis")) {
            showYAxis = TiConvert.toBoolean(options.get("yAxis"), false);
        }
        if (options.containsKey("yLines")) {
            yLines = TiConvert.toInt(options.get("yLines"));
        }
        if (options.containsKey("xLines")) {
            xLines = TiConvert.toInt(options.get("xLines"));
        }
        if (options.containsKey("fillSpace")) {
            fillSpace = TiConvert.toBoolean(options.get("fillSpace"), false);
        }
        if (options.containsKey("lineType")) {
            lineType = TiConvert.toInt(options.get("lineType"));
        }
        if (options.containsKey("strokeType")) {
            strokeType = TiConvert.toInt(options.get("strokeType"));
        }
        if (options.containsKey("fillColorTop")) {
            fillColorTop = TiConvert.toColor(options.getString("fillColorTop"));
        }
        if (options.containsKey("fillColorBottom")) {
            fillColorBottom = TiConvert.toColor(options.getString("fillColorBottom"));
        }
        updateView();
    }

    @Kroll.setProperty
    private void setValues(Object[] obj) {
        points = obj;
    }

    @Kroll.setProperty
    private void setLineColor(Object obj) {
        lineColor = TiConvert.toColor(obj, TiApplication.getAppCurrentActivity());
        if (view != null) view.setLineColor(lineColor);
    }

    @Kroll.setProperty
    private void setStrokeType(int value) {
        strokeType = TiConvert.toInt(value);
        if (view != null) view.strokeType = strokeType;
    }

    @Kroll.setProperty
    private void setLineWidth(Object obj) {
        lineWidth = TiConvert.toInt(obj);
        if (view != null) view.setLineWidth(lineWidth);
    }

    @Kroll.setProperty
    private void setFillSpace(Object obj) {
        fillSpace = TiConvert.toBoolean(obj, false);
        if (view != null) view.fillSpace = fillSpace;
    }

    @Kroll.setProperty
    private void fillColorTop(String obj) {
        fillColorTop = TiConvert.toColor(obj);
        if (view != null) view.fillColorTop = fillColorTop;
    }

    @Kroll.setProperty
    private void setFillColorBottom(String obj) {
        fillColorTop = TiConvert.toColor(obj);
        if (view != null) view.fillColorBottom = fillColorBottom;
    }

    @Kroll.setProperty
    private void setLineType(Object obj) {
        lineType = TiConvert.toInt(obj);
        if (view != null) view.lineType = lineType;
    }

    @Kroll.setProperty
    private void setXLines(Object obj) {
        xLines = TiConvert.toInt(obj);
        if (view != null) view.xLines = xLines;
    }

    @Kroll.setProperty
    private void setYLines(Object obj) {
        yLines = TiConvert.toInt(obj);
        if (view != null) view.yLines = yLines;
    }

    @Kroll.setProperty
    private void setXAxis(Object obj) {
        showXAxis = TiConvert.toBoolean(obj, false);
        if (view != null) view.showXAis = showXAxis;
    }

    @Kroll.setProperty
    private void setYAxis(Object obj) {
        showYAxis = TiConvert.toBoolean(obj, false);
        if (view != null) view.showYAis = showYAxis;
    }

    @Kroll.setProperty
    private void setMaxValue(Object obj) {
        maxValue = TiConvert.toInt(obj);
        if (view != null) view.maxValue = maxValue;
    }

    @Kroll.setProperty
    private void setStartAt(Object obj) {
        startAt = TiConvert.toInt(obj);
        if (view != null) view.startAt = startAt;
    }

    @Kroll.method
    private void clear() {
        if (view != null) {
            view.clear();
        }
    }

    @Kroll.method
    private void redraw() {
        if (view != null) {
            view.clear();
            view.setPoints(points);
        }
    }
}
